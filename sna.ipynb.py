# -*- coding: utf-8 -*-
"""SNA assignment -1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVJQlbBBJuhhry-Wxqi8vFXbMZwmyRV0
"""

import pandas as pd
import networkx as nx
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

def graph(path  ):
 Y = nx.read_edgelist(path, create_using=nx.DiGraph(), nodetype=int)
 return Y

large=graph("/content/drive/MyDrive/large.tsv")

medium=graph("/content/drive/MyDrive/medium.tsv")

len(large)
3cc9b053-7948-4042-8f3f-9039af321e2f

nx.info(large)

nx.info(medium)

large.number_of_nodes()

from collections import Counter
from operator import itemgetter

import matplotlib.pyplot as plt

G = nx.DiGraph(medium)
ind=[G.in_degree(n) for n in G.nodes()]
otd=[G.out_degree(n) for n in G.nodes()]
ind_count=Counter(ind)
out_count=Counter(otd)

fig = plt.figure()#For medium in scatter
ax = plt.gca()
plt.grid ( True )

ax.scatter(ind_count.keys(),ind_count.values(),marker='.')
ax.set_yscale('log')
ax.set_xscale('log')
ax.set_title(' Indegre Distribution medium-dataset')
ax.set(xlabel=' degree',ylabel='frequency')

fig = plt.figure()#For medium out scatter
ax = plt.gca()
plt.grid ( True )

ax.scatter(out_count.keys(),out_count.values(),marker='.')
ax.set_yscale('log')
# ax.set_xscale('log')
ax.set_title(' OutDegree Distribution medium-dataset')
ax.set(xlabel=' degree',ylabel='frequency')

Gi = nx.DiGraph(large)
indl=[Gi.in_degree(n) for n in Gi.nodes()]
otdl=[Gi.out_degree(n) for n in Gi.nodes()]
indl_count=Counter(indl)
outl_count=Counter(otdl)

fig = plt.figure()#for large scattwer in
ax = plt.gca()
plt.grid ( True )

ax.scatter(indl_count.keys(),indl_count.values(),marker='.')
ax.set_yscale('log')
# ax.set_xscale('log')
ax.set_title(' Indegre Distribution large-dataset')
ax.set(xlabel=' degree',ylabel='frequency')

fig = plt.figure()#for large scattwer out
ax = plt.gca()
plt.grid ( True )

ax.scatter(outl_count.keys(),outl_count.values(),marker='.')
ax.set_yscale('log')
ax.set_xscale('log')
ax.set_title(' Indegre Distribution large-dataset')
ax.set(xlabel=' degree',ylabel='frequency')

def degree_dis(Gi, in_degree=False, out_degree=False):#large

    nodes = Gi.nodes()
    if in_degree:
        in_degree = dict(Gi.in_degree())
        degseq=[in_degree.get(k,0) for k in nodes]
    elif out_degree:
        out_degree = dict(Gi.out_degree())
        degseq=[out_degree.get(k,0) for k in nodes]
    else:
        degseq=[v for k, v in G.degree()]
    dmax=max(degseq)+1
    freq= [ 0 for d in range(dmax) ]
    for d in degseq:
        freq[d] += 1
    return freq

in_degree_freq = degree_dis(Gi, in_degree=True)
out_degree_freq = degree_dis(Gi, out_degree=True)
degrees = range(len(in_degree_freq))
plt.figure(figsize=(12, 8), dpi=100,) 
plt.loglog(range(len(in_degree_freq)), in_degree_freq, 'bo-', label='in-degree') 
plt.loglog(range(len(out_degree_freq)), out_degree_freq, 'ro-', label='out-degree')
plt.legend(['Indegree', 'OutDegree'])
plt.title('Large Graph')
plt.xlabel('Degree ')
plt.ylabel('Frequency')

in_degree_freq = degree_dis(G, in_degree=True)
out_degree_freq = degree_dis(G, out_degree=True)
degrees = range(len(in_degree_freq))
plt.figure(figsize=(12, 8), dpi=100,) 
plt.loglog(range(len(in_degree_freq)), in_degree_freq, 'bo-', label='in-degree') 
plt.loglog(range(len(out_degree_freq)), out_degree_freq, 'ro-', label='out-degree')
plt.legend(['Indegree', 'OutDegree'])
# plt.xscale('linear')
# plt.yscale('linear')
plt.title('Medium Graph')
plt.xlabel('Degree ')
plt.ylabel('Frequency')

#largest weakly connected medium_graph large_graph
large_weakly = (nx.number_weakly_connected_components(large))

print("no of weakly connected large graph=",(large_weakly))
medium_weakly = (nx.number_weakly_connected_components(medium))
print("no of weakly connected medium graph=",(medium_weakly))

large_strongly = nx.number_strongly_connected_components(large)
print("no of strongly connected large graph=",(large_strongly))
medium_strongly = nx.number_strongly_connected_components(medium)
print("no of strongly connected medium graph=",(medium_strongly))

largest_strongl = max(nx.strongly_connected_components(large), key=len)
largest_weaklyl=max(nx.weakly_connected_components(large), key=len)
print(len(largest_strongl))
print(len(largest_weaklyl))
largest_stronglm=max(nx.strongly_connected_components(medium), key=len)
largest_weaklym=max(nx.weakly_connected_components(medium), key=len)
print(len(largest_stronglm))
print(len(largest_weaklym))

S = large.subgraph(largest_strongl)
print(' The edges in the largest strongly connected component large graph=',len(nx.edges(S)))  
print(' The nodes in the largest strongly connected component large graph=',len(nx.nodes(S)))

M = medium.subgraph(largest_stronglm)
print(' The edges in the largest strongly connected component medium graph=',len(nx.edges(M)))
print(' The nodes in the largest strongly connected component medium graph=',len(nx.nodes(M)))

WL = large.subgraph(largest_weaklyl)
print(' The edges in the largest weakly connected component large graph=',len(nx.edges(WL)))  
print(' The nodes in the largest weakly connected component large graph=',len(nx.nodes(WL)))

WM= medium.subgraph(largest_weaklym)
print(' The edges in the largest strongly connected component medium graph=',len(nx.edges(WM)))
print(' The nodes in the largest strongly connected component medium graph=',len(nx.nodes(WM)))

print("Average clustering medium =",nx.average_clustering(medium))
print("Average clustering large=", nx.average_clustering(large))

import random 
from matplotlib import pyplot

'2.6 Average distance Distribution  '

p= medium.subgraph(largest_weaklym)

leng = dict(nx.all_pairs_shortest_path_length(p))

leng

def NestedDictValues(p):
    for v in p.values():
         if isinstance(v, dict):
           yield from NestedDictValues(v)
         else:
          yield v
distance = list(NestedDictValues(leng))
distance.sort()
labels, counts = np.unique(distance,return_counts=True)
ticks = range(len(counts))
pyplot.yscale('log')
plt.bar(ticks,counts)
plt.xticks(ticks, labels)
plt.xlabel('Distance')
#plt.xscale('log')
plt.ylabel('Frequency')
plt.title('Distance distribution medium dataset')
#plt.yscale('log')
plt.show()

p= large.subgraph(largest_weaklyl)

leng = dict(nx.all_pairs_shortest_path_length(p))

leng

def NestedDictValues(p):
    for v in p.values():
         if isinstance(v, dict):
           yield from NestedDictValues(v)
         else:
          yield v
distance = list(NestedDictValues(leng))
distance.sort()
labels, counts = np.unique(distance,return_counts=True)
ticks = range(len(counts))
pyplot.yscale('log')
plt.bar(ticks,counts)
plt.xticks(ticks, labels)
plt.xlabel('Distance')
plt.xscale('log')
plt.ylabel('Frequency')
plt.title('Distance distribution large dataset')
plt.yscale('log')
plt.show()

import random

"Average distance distrubiton large @5 "
J1= large.subgraph(largest_weaklyl)
nofs1=round(0.05*J1.number_of_nodes())

sampled1 = random.sample(J1.nodes(), nofs1)
sampled_subgraph1 = J1.subgraph(sampled1)
print(sampled_subgraph1.number_of_nodes())

leng = dict(nx.all_pairs_shortest_path_length(sampled_subgraph1))
leng

def NestedDictValues(sampled_subgraph1):
    for v in sampled_subgraph1.values():
         if isinstance(v, dict):
           yield from NestedDictValues(v)
         else:
          yield v
distance = list(NestedDictValues(leng))
distance.sort()
labels, counts = np.unique(distance,return_counts=True)
ticks = range(len(counts))
plt.bar(ticks,counts, align='center')
plt.xticks(ticks, labels)
plt.xlabel('Distance')
#plt.xscale('log')
plt.ylabel('Frequency')
plt.title('Distance distribution large dataset round 05')
plt.yscale('log')
plt.show()

"Average distance distrubiton large @10 "
J1= large.subgraph(largest_weaklyl)
nofs1=round(0.10*J1.number_of_nodes())

sampled1 = random.sample(J1.nodes(), nofs1)
sampled_subgraph1 = J1.subgraph(sampled1)
print(sampled_subgraph1.number_of_nodes())

leng = dict(nx.all_pairs_shortest_path_length(sampled_subgraph1))
def NestedDictValues(sampled_subgraph1):
    for v in sampled_subgraph1.values():
         if isinstance(v, dict):
           yield from NestedDictValues(v)
         else:
          yield v
distance = list(NestedDictValues(leng))
distance.sort()
labels, counts = np.unique(distance,return_counts=True)
ticks = range(len(counts))
plt.bar(ticks,counts, align='center')
plt.xticks(ticks, labels)
plt.xlabel('Distance')
#plt.xscale('log')
plt.ylabel('Frequency')
plt.title('Distance distribution large dataset round 10')
plt.yscale('log')
plt.show()